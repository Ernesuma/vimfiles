# self defined:
# -------------
,ul     : underline one line
,cul     : underline one line in commentary
,lh     : goto the tag under cursor (e.g. in the help system)
,hl     : go back in tag stack

:Vimrc              : open vimrc file
:ReloadVimrc        : loads the vimrc file again
:MyUsefulCmds       : opens this file
:CdCurrentFilePath  : cd into directory of current buffer file


# insert mode
# -----------
gi      : insert text where last insert mode ended (uses ^-mark)


# normal mode
# -----------
ga      : (or :as[cii]) print the ASCII code of character under cursor


# search
# ------
g* g#   : no "\<" and "\>" around the word to search --> includes not-whole words
gd gD   : Goto local/global declaration


# spell checking
# --------------
]s      : next error
[s      : previous error
z=      : spelling suggestions
zg      : add as good word to user list
zG      : add as good word to internal list
zw      : mark as wrong in user list
zW      : mark as wrong in internal list


# check out later
# ---------------
:cope


# diff mode
# ---------
[c      Jump backwards to the previous start of a change.
        When a count is used, do it that many times.
                                *]c*
]c      Jump forwards to the next start of a change.
        When a count is used, do it that many times.

do      diff obtain: gets the change from the other file

dp      diff put: puts the change to the other file


# change line endings
# -------------------
Change the lineendings in the view:
    :e ++ff=dos
    :e ++ff=mac
    :e ++ff=unix

This can also be used as saving operation (:w alone will not save using the lineendings you see on screen):
    :w ++ff=dos
    :w ++ff=mac
    :w ++ff=unix

And you can use it from the command-line:
    for file in $(ls *cpp)
    do 
        vi +':w ++ff=unix' +':q' ${file}
    done

Alternative: search and replace
    :%s/\r/\r/g


# expression register
# -------------------
insert calc result (insert mode)
<C-r>=sqrt(81)<C-m>

insert calc result (normal mode)
"=44*9<C-m>p

insert result of ex cmd
"=execute('exCmd')<C-m>p

insert external cmd result
"=system('ls')<C-m>p


# show register
:reg


# cd current file path
# --------------------
:cd  %p:h/


# flake8
# ------
Python static code checker.
F7      check current buffer
:cn     next finding (quickfix)
:cp     prev finding (quickfix)

# VSCode Vim
# ----------
gb : multiselect next word as under cursor
gcc : toggle comment
gc2j : toggle next 2 lines comment
gc43G : toggle comment till line 43
gC : block comment
